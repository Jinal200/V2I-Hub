
/**
 * WARNING: DO NOT EDIT THIS FILE
 *
 * This source file was generated from the CPlusPlusGenerator.xsl stylesheet
 *
 * Your changes will be overwritten when this tool executes again.  In order
 * to edit the contents, you must go into the source XML files
 *
 * @author Greg Baumgardner
 */
 

#ifndef INCLUDE_UNITSENUMTYPES_H_
#define INCLUDE_UNITSENUMTYPES_H_

#ifndef CONSTEXPR
#if __cplusplus > 199711L
#define CONSTEXPR constexpr
#else
#ifdef __GNUC__
#define CONSTEXPR __attribute__ ((unused))
#else
#define CONSTEXPR
#endif /* __GNUC__ */
#endif /* __cplusplus > 199711L */
#endif

#if __cplusplus >= 201103L
#include <tmx/utils/Enum.hpp>
#endif /* __cplusplus >= 201103L */
		
	
namespace tmx {
	
		
namespace messages {
	
			
namespace units {
	
				
enum class Time 
{
		ns = 0,
		us = 1,
		ms = 2,
		s = 3,
		min = 4,
		hrs = 5,
		days = 6
};
		
static CONSTEXPR const char *TIME_NS_STRING = "ns";
static CONSTEXPR const char *TIME_US_STRING = "us";
static CONSTEXPR const char *TIME_MS_STRING = "ms";
static CONSTEXPR const char *TIME_S_STRING = "s";
static CONSTEXPR const char *TIME_MIN_STRING = "min";
static CONSTEXPR const char *TIME_HRS_STRING = "hrs";
static CONSTEXPR const char *TIME_DAYS_STRING = "days";
		
static CONSTEXPR const char *TIME_ALL_STRINGS[] = 
{
		TIME_NS_STRING,
		TIME_US_STRING,
		TIME_MS_STRING,
		TIME_S_STRING,
		TIME_MIN_STRING,
		TIME_HRS_STRING,
		TIME_DAYS_STRING
};
		
enum class Distance 
{
		nm = 0,
		um = 1,
		mm = 2,
		cm = 3,
		m = 4,
		km = 5,
		in = 6,
		ft = 7,
		yd = 8,
		mi = 9
};
		
static CONSTEXPR const char *DISTANCE_NM_STRING = "nm";
static CONSTEXPR const char *DISTANCE_UM_STRING = "um";
static CONSTEXPR const char *DISTANCE_MM_STRING = "mm";
static CONSTEXPR const char *DISTANCE_CM_STRING = "cm";
static CONSTEXPR const char *DISTANCE_M_STRING = "m";
static CONSTEXPR const char *DISTANCE_KM_STRING = "km";
static CONSTEXPR const char *DISTANCE_IN_STRING = "in";
static CONSTEXPR const char *DISTANCE_FT_STRING = "ft";
static CONSTEXPR const char *DISTANCE_YD_STRING = "yd";
static CONSTEXPR const char *DISTANCE_MI_STRING = "mi";
		
static CONSTEXPR const char *DISTANCE_ALL_STRINGS[] = 
{
		DISTANCE_NM_STRING,
		DISTANCE_UM_STRING,
		DISTANCE_MM_STRING,
		DISTANCE_CM_STRING,
		DISTANCE_M_STRING,
		DISTANCE_KM_STRING,
		DISTANCE_IN_STRING,
		DISTANCE_FT_STRING,
		DISTANCE_YD_STRING,
		DISTANCE_MI_STRING
};
		
enum class Speed 
{
		mps = 0,
		kph = 1,
		ftpers = 2,
		mph = 3,
		knots = 4
};
		
static CONSTEXPR const char *SPEED_MPS_STRING = "mps";
static CONSTEXPR const char *SPEED_KPH_STRING = "kph";
static CONSTEXPR const char *SPEED_FTPERS_STRING = "ft/s";
static CONSTEXPR const char *SPEED_MPH_STRING = "mph";
static CONSTEXPR const char *SPEED_KNOTS_STRING = "knots";
		
static CONSTEXPR const char *SPEED_ALL_STRINGS[] = 
{
		SPEED_MPS_STRING,
		SPEED_KPH_STRING,
		SPEED_FTPERS_STRING,
		SPEED_MPH_STRING,
		SPEED_KNOTS_STRING
};
		
enum class Acceleration 
{
		Gal = 0,
		mperspers = 1,
		kmperhrperhr = 2,
		ftperspers = 3,
		miperhrperhr = 4,
		g = 5
};
		
static CONSTEXPR const char *ACCELERATION_GAL_STRING = "cm/s/s";
static CONSTEXPR const char *ACCELERATION_MPERSPERS_STRING = "m/s/s";
static CONSTEXPR const char *ACCELERATION_KMPERHRPERHR_STRING = "km/hr/hr";
static CONSTEXPR const char *ACCELERATION_FTPERSPERS_STRING = "ft/s/s";
static CONSTEXPR const char *ACCELERATION_MIPERHRPERHR_STRING = "mi/hr/hr";
static CONSTEXPR const char *ACCELERATION_G_STRING = "g";
		
static CONSTEXPR const char *ACCELERATION_ALL_STRINGS[] = 
{
		ACCELERATION_GAL_STRING,
		ACCELERATION_MPERSPERS_STRING,
		ACCELERATION_KMPERHRPERHR_STRING,
		ACCELERATION_FTPERSPERS_STRING,
		ACCELERATION_MIPERHRPERHR_STRING,
		ACCELERATION_G_STRING
};
		
enum class Mass 
{
		mg = 0,
		g = 1,
		kg = 2,
		tonne = 3,
		oz = 4,
		lb = 5,
		ton = 6,
		st = 7
};
		
static CONSTEXPR const char *MASS_MG_STRING = "mg";
static CONSTEXPR const char *MASS_G_STRING = "g";
static CONSTEXPR const char *MASS_KG_STRING = "kg";
static CONSTEXPR const char *MASS_TONNE_STRING = "tonne";
static CONSTEXPR const char *MASS_OZ_STRING = "oz";
static CONSTEXPR const char *MASS_LB_STRING = "lb";
static CONSTEXPR const char *MASS_TON_STRING = "ton";
static CONSTEXPR const char *MASS_ST_STRING = "st";
		
static CONSTEXPR const char *MASS_ALL_STRINGS[] = 
{
		MASS_MG_STRING,
		MASS_G_STRING,
		MASS_KG_STRING,
		MASS_TONNE_STRING,
		MASS_OZ_STRING,
		MASS_LB_STRING,
		MASS_TON_STRING,
		MASS_ST_STRING
};
		
enum class Force 
{
		N = 0,
		dyn = 1,
		lbf = 2,
		kp = 3
};
		
static CONSTEXPR const char *FORCE_N_STRING = "N";
static CONSTEXPR const char *FORCE_DYN_STRING = "dyn";
static CONSTEXPR const char *FORCE_LBF_STRING = "lbf";
static CONSTEXPR const char *FORCE_KP_STRING = "kp";
		
static CONSTEXPR const char *FORCE_ALL_STRINGS[] = 
{
		FORCE_N_STRING,
		FORCE_DYN_STRING,
		FORCE_LBF_STRING,
		FORCE_KP_STRING
};
		
enum class Energy 
{
		J = 0,
		kJ = 1,
		cal = 2,
		kcal = 3,
		BTU = 4,
		kWh = 5,
		ftlb = 6,
		eV = 7,
		erg = 8
};
		
static CONSTEXPR const char *ENERGY_J_STRING = "J";
static CONSTEXPR const char *ENERGY_KJ_STRING = "kJ";
static CONSTEXPR const char *ENERGY_CAL_STRING = "cal";
static CONSTEXPR const char *ENERGY_KCAL_STRING = "kcal";
static CONSTEXPR const char *ENERGY_BTU_STRING = "BTU";
static CONSTEXPR const char *ENERGY_KWH_STRING = "kWh";
static CONSTEXPR const char *ENERGY_FTLB_STRING = "ftlb";
static CONSTEXPR const char *ENERGY_EV_STRING = "eV";
static CONSTEXPR const char *ENERGY_ERG_STRING = "erg";
		
static CONSTEXPR const char *ENERGY_ALL_STRINGS[] = 
{
		ENERGY_J_STRING,
		ENERGY_KJ_STRING,
		ENERGY_CAL_STRING,
		ENERGY_KCAL_STRING,
		ENERGY_BTU_STRING,
		ENERGY_KWH_STRING,
		ENERGY_FTLB_STRING,
		ENERGY_EV_STRING,
		ENERGY_ERG_STRING
};
		
enum class Power 
{
		mW = 0,
		W = 1,
		kW = 2,
		MegaW = 3,
		GW = 4,
		ergspers = 5,
		lbfpers = 6,
		hp = 7,
		dBm = 8,
		kcalperhr = 9
};
		
static CONSTEXPR const char *POWER_MW_STRING = "mW";
static CONSTEXPR const char *POWER_W_STRING = "W";
static CONSTEXPR const char *POWER_KW_STRING = "kW";
static CONSTEXPR const char *POWER_MEGAW_STRING = "MW";
static CONSTEXPR const char *POWER_GW_STRING = "GW";
static CONSTEXPR const char *POWER_ERGSPERS_STRING = "ergs/s";
static CONSTEXPR const char *POWER_LBFPERS_STRING = "lbf/s";
static CONSTEXPR const char *POWER_HP_STRING = "hp";
static CONSTEXPR const char *POWER_DBM_STRING = "dBm";
static CONSTEXPR const char *POWER_KCALPERHR_STRING = "kcal/hr";
		
static CONSTEXPR const char *POWER_ALL_STRINGS[] = 
{
		POWER_MW_STRING,
		POWER_W_STRING,
		POWER_KW_STRING,
		POWER_MEGAW_STRING,
		POWER_GW_STRING,
		POWER_ERGSPERS_STRING,
		POWER_LBFPERS_STRING,
		POWER_HP_STRING,
		POWER_DBM_STRING,
		POWER_KCALPERHR_STRING
};
		
enum class Angle 
{
		deg = 0,
		pirad = 1,
		rad = 2,
		grad = 3
};
		
static CONSTEXPR const char *ANGLE_DEG_STRING = "⁰";
static CONSTEXPR const char *ANGLE_PIRAD_STRING = "π rad";
static CONSTEXPR const char *ANGLE_RAD_STRING = "rad";
static CONSTEXPR const char *ANGLE_GRAD_STRING = "grad";
		
static CONSTEXPR const char *ANGLE_ALL_STRINGS[] = 
{
		ANGLE_DEG_STRING,
		ANGLE_PIRAD_STRING,
		ANGLE_RAD_STRING,
		ANGLE_GRAD_STRING
};
		
enum class Frequency 
{
		Hz = 0,
		kHz = 1,
		MHz = 2,
		GHz = 3,
		rpm = 4,
		piradpers = 5,
		radpers = 6
};
		
static CONSTEXPR const char *FREQUENCY_HZ_STRING = "Hz";
static CONSTEXPR const char *FREQUENCY_KHZ_STRING = "kHz";
static CONSTEXPR const char *FREQUENCY_MHZ_STRING = "MHz";
static CONSTEXPR const char *FREQUENCY_GHZ_STRING = "GHz";
static CONSTEXPR const char *FREQUENCY_RPM_STRING = "rpm";
static CONSTEXPR const char *FREQUENCY_PIRADPERS_STRING = "π rad/s";
static CONSTEXPR const char *FREQUENCY_RADPERS_STRING = "rad/s";
		
static CONSTEXPR const char *FREQUENCY_ALL_STRINGS[] = 
{
		FREQUENCY_HZ_STRING,
		FREQUENCY_KHZ_STRING,
		FREQUENCY_MHZ_STRING,
		FREQUENCY_GHZ_STRING,
		FREQUENCY_RPM_STRING,
		FREQUENCY_PIRADPERS_STRING,
		FREQUENCY_RADPERS_STRING
};
		
enum class Temperature 
{
		C = 0,
		F = 1,
		K = 2
};
		
static CONSTEXPR const char *TEMPERATURE_C_STRING = "⁰C";
static CONSTEXPR const char *TEMPERATURE_F_STRING = "⁰F";
static CONSTEXPR const char *TEMPERATURE_K_STRING = "K";
		
static CONSTEXPR const char *TEMPERATURE_ALL_STRINGS[] = 
{
		TEMPERATURE_C_STRING,
		TEMPERATURE_F_STRING,
		TEMPERATURE_K_STRING
};
		
enum class Percent 
{
		decimal = 0,
		pct = 1
};
		
static CONSTEXPR const char *PERCENT_DECIMAL_STRING = "decimal";
static CONSTEXPR const char *PERCENT_PCT_STRING = "%";
		
static CONSTEXPR const char *PERCENT_ALL_STRINGS[] = 
{
		PERCENT_DECIMAL_STRING,
		PERCENT_PCT_STRING
};
		
enum class Area 
{
		sqcm = 0,
		sqm = 1,
		sqkm = 2,
		ha = 3,
		sqin = 4,
		sqft = 5,
		sqyd = 6,
		sqmi = 7,
		acre = 8
};
		
static CONSTEXPR const char *AREA_SQCM_STRING = "cm^2";
static CONSTEXPR const char *AREA_SQM_STRING = "m^2";
static CONSTEXPR const char *AREA_SQKM_STRING = "km^2";
static CONSTEXPR const char *AREA_HA_STRING = "ha";
static CONSTEXPR const char *AREA_SQIN_STRING = "in^2";
static CONSTEXPR const char *AREA_SQFT_STRING = "ft^2";
static CONSTEXPR const char *AREA_SQYD_STRING = "yd^2";
static CONSTEXPR const char *AREA_SQMI_STRING = "mi^2";
static CONSTEXPR const char *AREA_ACRE_STRING = "acre";
		
static CONSTEXPR const char *AREA_ALL_STRINGS[] = 
{
		AREA_SQCM_STRING,
		AREA_SQM_STRING,
		AREA_SQKM_STRING,
		AREA_HA_STRING,
		AREA_SQIN_STRING,
		AREA_SQFT_STRING,
		AREA_SQYD_STRING,
		AREA_SQMI_STRING,
		AREA_ACRE_STRING
};
		
enum class Volume 
{
		ml = 0,
		l = 1,
		cubicm = 2,
		cubicin = 3,
		cubicft = 4,
		cubicyd = 5,
		tsp = 6,
		tbsp = 7,
		floz = 8,
		cup = 9,
		pt = 10,
		qt = 11,
		gal = 12
};
		
static CONSTEXPR const char *VOLUME_ML_STRING = "ml";
static CONSTEXPR const char *VOLUME_L_STRING = "l";
static CONSTEXPR const char *VOLUME_CUBICM_STRING = "m^3";
static CONSTEXPR const char *VOLUME_CUBICIN_STRING = "in^3";
static CONSTEXPR const char *VOLUME_CUBICFT_STRING = "ft^3";
static CONSTEXPR const char *VOLUME_CUBICYD_STRING = "yd^3";
static CONSTEXPR const char *VOLUME_TSP_STRING = "tsp";
static CONSTEXPR const char *VOLUME_TBSP_STRING = "tbsp";
static CONSTEXPR const char *VOLUME_FLOZ_STRING = "floz";
static CONSTEXPR const char *VOLUME_CUP_STRING = "cup";
static CONSTEXPR const char *VOLUME_PT_STRING = "pt";
static CONSTEXPR const char *VOLUME_QT_STRING = "qt";
static CONSTEXPR const char *VOLUME_GAL_STRING = "gal";
		
static CONSTEXPR const char *VOLUME_ALL_STRINGS[] = 
{
		VOLUME_ML_STRING,
		VOLUME_L_STRING,
		VOLUME_CUBICM_STRING,
		VOLUME_CUBICIN_STRING,
		VOLUME_CUBICFT_STRING,
		VOLUME_CUBICYD_STRING,
		VOLUME_TSP_STRING,
		VOLUME_TBSP_STRING,
		VOLUME_FLOZ_STRING,
		VOLUME_CUP_STRING,
		VOLUME_PT_STRING,
		VOLUME_QT_STRING,
		VOLUME_GAL_STRING
};
		
enum class Pressure 
{
		Pa = 0,
		bar = 1,
		atm = 2,
		psi = 3,
		mmhg = 4
};
		
static CONSTEXPR const char *PRESSURE_PA_STRING = "Pa";
static CONSTEXPR const char *PRESSURE_BAR_STRING = "bar";
static CONSTEXPR const char *PRESSURE_ATM_STRING = "atm";
static CONSTEXPR const char *PRESSURE_PSI_STRING = "psi";
static CONSTEXPR const char *PRESSURE_MMHG_STRING = "mmhg";
		
static CONSTEXPR const char *PRESSURE_ALL_STRINGS[] = 
{
		PRESSURE_PA_STRING,
		PRESSURE_BAR_STRING,
		PRESSURE_ATM_STRING,
		PRESSURE_PSI_STRING,
		PRESSURE_MMHG_STRING
};
		
enum class FuelEconomy 
{
		kmperl = 0,
		mpg = 1
};
		
static CONSTEXPR const char *FUELECONOMY_KMPERL_STRING = "km/l";
static CONSTEXPR const char *FUELECONOMY_MPG_STRING = "mpg";
		
static CONSTEXPR const char *FUELECONOMY_ALL_STRINGS[] = 
{
		FUELECONOMY_KMPERL_STRING,
		FUELECONOMY_MPG_STRING
};
		
enum class Digital 
{
		bits = 0,
		kbit = 1,
		Mbit = 2,
		Gbit = 3,
		Tbit = 4,
		Pbit = 5,
		bytes = 6,
		kB = 7,
		MB = 8,
		GB = 9,
		TB = 10,
		PB = 11
};
		
static CONSTEXPR const char *DIGITAL_BITS_STRING = "bits";
static CONSTEXPR const char *DIGITAL_KBIT_STRING = "kbit";
static CONSTEXPR const char *DIGITAL_MBIT_STRING = "Mbit";
static CONSTEXPR const char *DIGITAL_GBIT_STRING = "Gbit";
static CONSTEXPR const char *DIGITAL_TBIT_STRING = "Tbit";
static CONSTEXPR const char *DIGITAL_PBIT_STRING = "Pbit";
static CONSTEXPR const char *DIGITAL_BYTES_STRING = "bytes";
static CONSTEXPR const char *DIGITAL_KB_STRING = "kB";
static CONSTEXPR const char *DIGITAL_MB_STRING = "MB";
static CONSTEXPR const char *DIGITAL_GB_STRING = "GB";
static CONSTEXPR const char *DIGITAL_TB_STRING = "TB";
static CONSTEXPR const char *DIGITAL_PB_STRING = "PB";
		
static CONSTEXPR const char *DIGITAL_ALL_STRINGS[] = 
{
		DIGITAL_BITS_STRING,
		DIGITAL_KBIT_STRING,
		DIGITAL_MBIT_STRING,
		DIGITAL_GBIT_STRING,
		DIGITAL_TBIT_STRING,
		DIGITAL_PBIT_STRING,
		DIGITAL_BYTES_STRING,
		DIGITAL_KB_STRING,
		DIGITAL_MB_STRING,
		DIGITAL_GB_STRING,
		DIGITAL_TB_STRING,
		DIGITAL_PB_STRING
};
		
enum class Bandwidth 
{
		bps = 0,
		kbps = 1,
		Mbps = 2,
		Gbps = 3,
		Tbps = 4,
		Pbps = 5,
		bytespers = 6,
		kbytespers = 7,
		Mbytespers = 8,
		Gbytespers = 9,
		Tbytespers = 10,
		Pbytespers = 11
};
		
static CONSTEXPR const char *BANDWIDTH_BPS_STRING = "bps";
static CONSTEXPR const char *BANDWIDTH_KBPS_STRING = "kbps";
static CONSTEXPR const char *BANDWIDTH_MBPS_STRING = "Mbps";
static CONSTEXPR const char *BANDWIDTH_GBPS_STRING = "Gbps";
static CONSTEXPR const char *BANDWIDTH_TBPS_STRING = "Tbps";
static CONSTEXPR const char *BANDWIDTH_PBPS_STRING = "Pbps";
static CONSTEXPR const char *BANDWIDTH_BYTESPERS_STRING = "Bps";
static CONSTEXPR const char *BANDWIDTH_KBYTESPERS_STRING = "kBps";
static CONSTEXPR const char *BANDWIDTH_MBYTESPERS_STRING = "MBps";
static CONSTEXPR const char *BANDWIDTH_GBYTESPERS_STRING = "GBps";
static CONSTEXPR const char *BANDWIDTH_TBYTESPERS_STRING = "TBps";
static CONSTEXPR const char *BANDWIDTH_PBYTESPERS_STRING = "PBps";
		
static CONSTEXPR const char *BANDWIDTH_ALL_STRINGS[] = 
{
		BANDWIDTH_BPS_STRING,
		BANDWIDTH_KBPS_STRING,
		BANDWIDTH_MBPS_STRING,
		BANDWIDTH_GBPS_STRING,
		BANDWIDTH_TBPS_STRING,
		BANDWIDTH_PBPS_STRING,
		BANDWIDTH_BYTESPERS_STRING,
		BANDWIDTH_KBYTESPERS_STRING,
		BANDWIDTH_MBYTESPERS_STRING,
		BANDWIDTH_GBYTESPERS_STRING,
		BANDWIDTH_TBYTESPERS_STRING,
		BANDWIDTH_PBYTESPERS_STRING
};
		
			
} /* End namespace units */
		
		
} /* End namespace messages */
		
	
} /* End namespace tmx */
		

#if __cplusplus >= 201103L
namespace tmx {
		
template <tmx::messages::units::Time V> struct EnumName<tmx::messages::units::Time, V> {
	static constexpr const char *name = tmx::messages::units::TIME_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Time> {
	typedef EnumSequence<tmx::messages::units::Time,
		tmx::messages::units::Time::ns,
		tmx::messages::units::Time::us,
		tmx::messages::units::Time::ms,
		tmx::messages::units::Time::s,
		tmx::messages::units::Time::min,
		tmx::messages::units::Time::hrs,
		tmx::messages::units::Time::days> type;
};
	
template <tmx::messages::units::Distance V> struct EnumName<tmx::messages::units::Distance, V> {
	static constexpr const char *name = tmx::messages::units::DISTANCE_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Distance> {
	typedef EnumSequence<tmx::messages::units::Distance,
		tmx::messages::units::Distance::nm,
		tmx::messages::units::Distance::um,
		tmx::messages::units::Distance::mm,
		tmx::messages::units::Distance::cm,
		tmx::messages::units::Distance::m,
		tmx::messages::units::Distance::km,
		tmx::messages::units::Distance::in,
		tmx::messages::units::Distance::ft,
		tmx::messages::units::Distance::yd,
		tmx::messages::units::Distance::mi> type;
};
	
template <tmx::messages::units::Speed V> struct EnumName<tmx::messages::units::Speed, V> {
	static constexpr const char *name = tmx::messages::units::SPEED_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Speed> {
	typedef EnumSequence<tmx::messages::units::Speed,
		tmx::messages::units::Speed::mps,
		tmx::messages::units::Speed::kph,
		tmx::messages::units::Speed::ftpers,
		tmx::messages::units::Speed::mph,
		tmx::messages::units::Speed::knots> type;
};
	
template <tmx::messages::units::Acceleration V> struct EnumName<tmx::messages::units::Acceleration, V> {
	static constexpr const char *name = tmx::messages::units::ACCELERATION_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Acceleration> {
	typedef EnumSequence<tmx::messages::units::Acceleration,
		tmx::messages::units::Acceleration::Gal,
		tmx::messages::units::Acceleration::mperspers,
		tmx::messages::units::Acceleration::kmperhrperhr,
		tmx::messages::units::Acceleration::ftperspers,
		tmx::messages::units::Acceleration::miperhrperhr,
		tmx::messages::units::Acceleration::g> type;
};
	
template <tmx::messages::units::Mass V> struct EnumName<tmx::messages::units::Mass, V> {
	static constexpr const char *name = tmx::messages::units::MASS_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Mass> {
	typedef EnumSequence<tmx::messages::units::Mass,
		tmx::messages::units::Mass::mg,
		tmx::messages::units::Mass::g,
		tmx::messages::units::Mass::kg,
		tmx::messages::units::Mass::tonne,
		tmx::messages::units::Mass::oz,
		tmx::messages::units::Mass::lb,
		tmx::messages::units::Mass::ton,
		tmx::messages::units::Mass::st> type;
};
	
template <tmx::messages::units::Force V> struct EnumName<tmx::messages::units::Force, V> {
	static constexpr const char *name = tmx::messages::units::FORCE_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Force> {
	typedef EnumSequence<tmx::messages::units::Force,
		tmx::messages::units::Force::N,
		tmx::messages::units::Force::dyn,
		tmx::messages::units::Force::lbf,
		tmx::messages::units::Force::kp> type;
};
	
template <tmx::messages::units::Energy V> struct EnumName<tmx::messages::units::Energy, V> {
	static constexpr const char *name = tmx::messages::units::ENERGY_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Energy> {
	typedef EnumSequence<tmx::messages::units::Energy,
		tmx::messages::units::Energy::J,
		tmx::messages::units::Energy::kJ,
		tmx::messages::units::Energy::cal,
		tmx::messages::units::Energy::kcal,
		tmx::messages::units::Energy::BTU,
		tmx::messages::units::Energy::kWh,
		tmx::messages::units::Energy::ftlb,
		tmx::messages::units::Energy::eV,
		tmx::messages::units::Energy::erg> type;
};
	
template <tmx::messages::units::Power V> struct EnumName<tmx::messages::units::Power, V> {
	static constexpr const char *name = tmx::messages::units::POWER_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Power> {
	typedef EnumSequence<tmx::messages::units::Power,
		tmx::messages::units::Power::mW,
		tmx::messages::units::Power::W,
		tmx::messages::units::Power::kW,
		tmx::messages::units::Power::MegaW,
		tmx::messages::units::Power::GW,
		tmx::messages::units::Power::ergspers,
		tmx::messages::units::Power::lbfpers,
		tmx::messages::units::Power::hp,
		tmx::messages::units::Power::dBm,
		tmx::messages::units::Power::kcalperhr> type;
};
	
template <tmx::messages::units::Angle V> struct EnumName<tmx::messages::units::Angle, V> {
	static constexpr const char *name = tmx::messages::units::ANGLE_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Angle> {
	typedef EnumSequence<tmx::messages::units::Angle,
		tmx::messages::units::Angle::deg,
		tmx::messages::units::Angle::pirad,
		tmx::messages::units::Angle::rad,
		tmx::messages::units::Angle::grad> type;
};
	
template <tmx::messages::units::Frequency V> struct EnumName<tmx::messages::units::Frequency, V> {
	static constexpr const char *name = tmx::messages::units::FREQUENCY_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Frequency> {
	typedef EnumSequence<tmx::messages::units::Frequency,
		tmx::messages::units::Frequency::Hz,
		tmx::messages::units::Frequency::kHz,
		tmx::messages::units::Frequency::MHz,
		tmx::messages::units::Frequency::GHz,
		tmx::messages::units::Frequency::rpm,
		tmx::messages::units::Frequency::piradpers,
		tmx::messages::units::Frequency::radpers> type;
};
	
template <tmx::messages::units::Temperature V> struct EnumName<tmx::messages::units::Temperature, V> {
	static constexpr const char *name = tmx::messages::units::TEMPERATURE_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Temperature> {
	typedef EnumSequence<tmx::messages::units::Temperature,
		tmx::messages::units::Temperature::C,
		tmx::messages::units::Temperature::F,
		tmx::messages::units::Temperature::K> type;
};
	
template <tmx::messages::units::Percent V> struct EnumName<tmx::messages::units::Percent, V> {
	static constexpr const char *name = tmx::messages::units::PERCENT_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Percent> {
	typedef EnumSequence<tmx::messages::units::Percent,
		tmx::messages::units::Percent::decimal,
		tmx::messages::units::Percent::pct> type;
};
	
template <tmx::messages::units::Area V> struct EnumName<tmx::messages::units::Area, V> {
	static constexpr const char *name = tmx::messages::units::AREA_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Area> {
	typedef EnumSequence<tmx::messages::units::Area,
		tmx::messages::units::Area::sqcm,
		tmx::messages::units::Area::sqm,
		tmx::messages::units::Area::sqkm,
		tmx::messages::units::Area::ha,
		tmx::messages::units::Area::sqin,
		tmx::messages::units::Area::sqft,
		tmx::messages::units::Area::sqyd,
		tmx::messages::units::Area::sqmi,
		tmx::messages::units::Area::acre> type;
};
	
template <tmx::messages::units::Volume V> struct EnumName<tmx::messages::units::Volume, V> {
	static constexpr const char *name = tmx::messages::units::VOLUME_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Volume> {
	typedef EnumSequence<tmx::messages::units::Volume,
		tmx::messages::units::Volume::ml,
		tmx::messages::units::Volume::l,
		tmx::messages::units::Volume::cubicm,
		tmx::messages::units::Volume::cubicin,
		tmx::messages::units::Volume::cubicft,
		tmx::messages::units::Volume::cubicyd,
		tmx::messages::units::Volume::tsp,
		tmx::messages::units::Volume::tbsp,
		tmx::messages::units::Volume::floz,
		tmx::messages::units::Volume::cup,
		tmx::messages::units::Volume::pt,
		tmx::messages::units::Volume::qt,
		tmx::messages::units::Volume::gal> type;
};
	
template <tmx::messages::units::Pressure V> struct EnumName<tmx::messages::units::Pressure, V> {
	static constexpr const char *name = tmx::messages::units::PRESSURE_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Pressure> {
	typedef EnumSequence<tmx::messages::units::Pressure,
		tmx::messages::units::Pressure::Pa,
		tmx::messages::units::Pressure::bar,
		tmx::messages::units::Pressure::atm,
		tmx::messages::units::Pressure::psi,
		tmx::messages::units::Pressure::mmhg> type;
};
	
template <tmx::messages::units::FuelEconomy V> struct EnumName<tmx::messages::units::FuelEconomy, V> {
	static constexpr const char *name = tmx::messages::units::FUELECONOMY_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::FuelEconomy> {
	typedef EnumSequence<tmx::messages::units::FuelEconomy,
		tmx::messages::units::FuelEconomy::kmperl,
		tmx::messages::units::FuelEconomy::mpg> type;
};
	
template <tmx::messages::units::Digital V> struct EnumName<tmx::messages::units::Digital, V> {
	static constexpr const char *name = tmx::messages::units::DIGITAL_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Digital> {
	typedef EnumSequence<tmx::messages::units::Digital,
		tmx::messages::units::Digital::bits,
		tmx::messages::units::Digital::kbit,
		tmx::messages::units::Digital::Mbit,
		tmx::messages::units::Digital::Gbit,
		tmx::messages::units::Digital::Tbit,
		tmx::messages::units::Digital::Pbit,
		tmx::messages::units::Digital::bytes,
		tmx::messages::units::Digital::kB,
		tmx::messages::units::Digital::MB,
		tmx::messages::units::Digital::GB,
		tmx::messages::units::Digital::TB,
		tmx::messages::units::Digital::PB> type;
};
	
template <tmx::messages::units::Bandwidth V> struct EnumName<tmx::messages::units::Bandwidth, V> {
	static constexpr const char *name = tmx::messages::units::BANDWIDTH_ALL_STRINGS[static_cast<size_t>(V)];
};
template <> struct EnumSequenceBuilder<tmx::messages::units::Bandwidth> {
	typedef EnumSequence<tmx::messages::units::Bandwidth,
		tmx::messages::units::Bandwidth::bps,
		tmx::messages::units::Bandwidth::kbps,
		tmx::messages::units::Bandwidth::Mbps,
		tmx::messages::units::Bandwidth::Gbps,
		tmx::messages::units::Bandwidth::Tbps,
		tmx::messages::units::Bandwidth::Pbps,
		tmx::messages::units::Bandwidth::bytespers,
		tmx::messages::units::Bandwidth::kbytespers,
		tmx::messages::units::Bandwidth::Mbytespers,
		tmx::messages::units::Bandwidth::Gbytespers,
		tmx::messages::units::Bandwidth::Tbytespers,
		tmx::messages::units::Bandwidth::Pbytespers> type;
};
	
} /* End namespace tmx */
#endif /* __cplusplus >= 201103L */ 
#endif /* INCLUDE_UNITSENUMTYPES_H_ */
	